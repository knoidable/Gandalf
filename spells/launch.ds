/**
 * Gandalf
 * Copyright (C) 2020 Craig Roberts, Braden Edmunds, Alex High
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see https://www.gnu.org/licenses/gpl-3.0.html
 *
 * @name tick.ds
 * @version 2022/10/26
 * @summary Gandalf Spells
 **/
'use strict';

const Config = require('config').get('config');
const { SlashCommandBuilder } = require('discord.js');
const {encode} = require('html-entities');
const Tick = require("../models/Tick");
const dayjs = require("dayjs");
const utc = require('dayjs/plugin/utc');
const timezone = require('dayjs/plugin/timezone');
dayjs.extend(utc);
dayjs.extend(timezone);

module.exports = {
  data: new SlashCommandBuilder()
    .setName('tick')
    .setDescription('Shows when the given tick will happen.')
    .addIntegerOption(o => o.setName('tick').setDescription('tick').setRequired(false).setMinValue(Config.pa.tick.start).setMaxValue(Config.pa.tick.end))
    .addStringOption(o => o.setName('timezone').setDescription('timezone').setRequired(false)),
  async execute(interaction) {
    let _tick = interaction.options.getInteger('tick');
    let _tzone = interaction.options.getString('timezone');
    let tick = await Tick.findLastTick();
    if(!tick) {
      await interaction.reply(`Cannot find current tick.`);
    }
    else {
      let reply;
      if(!_tick || tick.tick === _tick) {
        reply = `It is currently tick ${tick.tick}`;
      }
      else {
        reply = `Tick ${_tick} is expected to happen in ${_tick-tick.tick} ticks`;
      }
      let ticktime = dayjs(tick.timestamp);
      if(_tzone) {
        reply += `(${ticktime.tz(_tzone)})`
      }
      else {
        reply += `(${ticktime.tz()})`;
      }
      await interaction.reply(reply);
    }
  },
  help: encode('/tick [tick] [timezone]')
};
