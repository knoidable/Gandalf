/**
 * Gandalf
 * Copyright (C) 2020 Craig Roberts, Braden Edmunds, Alex High
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see https://www.gnu.org/licenses/gpl-3.0.html
 *
 * @name tick.ds
 * @version 2022/10/26
 * @summary Gandalf Spells
 **/
'use strict';

const Config = require('config').get('config');
const { SlashCommandBuilder } = require('discord.js');
const {encode} = require('html-entities');
//const dayjs = require('dayjs');

const Ship = require('../../Mordor/models/Ship');


module.exports = {
  data: new SlashCommandBuilder()
    .setName('ship')
    .setDescription('Shows the stats of the specified ship.')
    .addStringOption(o => o.setName('ship').setDescription('ship').setRequired(true)),
  async execute(interaction) {
    let _ship = interaction.options.getString('ship');
    let ship = await Ship.findOne({ name: { $regex: '^' + _ship, $options: 'i'} });
    if(!ship) {
      await interaction.reply(`Cannot find ship ${_ship}`);
    }
    else {
      console.log(`SHIP: ${ship}`);
      let reply = `${ship.name} (${ship.race})\nClass: ${ship.class}\nTarget 1: ${ship.target1}`;
      if(ship.target2 !== '-') {
        reply += `\nTarget 2: ${ship.target2}`;
      }
      if(ship.target3 !== '-') {
        reply += `\nTarget 3: ${ship.target3}`;
      }
      reply += `\nType: ${ship.type}\nInit: ${ship.initiative}`;
      reply += `\nEMP Res: ${ship.empres}`;
      if(ship.type.toLowerCase() == 'emp') {
        reply += `\nGuns: ${ship.guns}`;
      }
      reply += `\nD/C: ${Math.trunc(Number(ship.damage)*10000/(Number(ship.metal) + Number(ship.crystal) + Number(ship.eonium)))}`;
      reply += `\nA/C: ${Math.trunc(Number(ship.armor)*10000/(Number(ship.metal) + Number(ship.crystal) + Number(ship.eonium)))}`;
      await interaction.reply(reply);
    }
  },
  help: encode('/ship <ship>')
};
