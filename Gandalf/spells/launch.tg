/**
 * Gandalf
 * Copyright (C) 2020 Craig Roberts, Braden Edmunds, Alex High
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see https://www.gnu.org/licenses/gpl-3.0.html
 *
 * @name launch.tg
 * @version 2022/11/06
 * @summary Gandalf Spells
 **/
'use strict';


const {encode} = require('html-entities');
const numeral = require('numeral');
const dayjs = require('dayjs')
const utc = require('dayjs/plugin/utc');
const timezone = require('dayjs/plugin/timezone');
const advancedFormat = require('dayjs/plugin/advancedFormat');
dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.extend(advancedFormat);

const { Mordor } = require('../../Mordor/Mordor');
const Tick = require('../../Mordor/models/Tick');

module.exports = {
  "launch": {
    usage: encode('/launch <ETA> <LT> [timezone=UTC]'),
    description: 'Calculate when ships should be launched to land at specified LT.',
    cast: (args) => {
      return new Promise(async (resolve, reject) => {
        if(!Array.isArray(args) || args.length < 2) {
          reject('invalid number of arguments.');
        }
        else {
          let eta = numeral(args[0]).value();
          if (eta == null) { reject(`ETA must be a valid number.`); }
          let _lt = args[1];
          let lt = numeral(_lt).value();
          if (lt == null) { reject(`LT must be a valid number.`); }

          let now_tick = await Tick.findLastTick();
          let now_time = dayjs(now_tick.timestamp).utc();
          let _timezone = 'UTC';
          if(args.length > 2) {
            try {
              now_time.tz(args[2]);
              _timezone = args[2];
            }
            catch(err) {
              _timezone = undefined;
            }
          }

          if(!_timezone) {
            reject(`invalid timezone: ${args[2]}`);
          }
          else {
            let current_time = dayjs().utc();
            let launch_tick = lt - eta;
            let launch_time = current_time.add(launch_tick - now_tick.tick, 'hours');
            let prelaunch_tick = lt - eta + 1;
            let prelaunch_mod = launch_tick - now_tick.tick;
            let reply = `eta ${eta} landing pt ${lt} (currently ${now_tick.tick}) must launch at pt ${launch_tick} (${launch_time.tz(_timezone).format('YYYY-MM-DD H:55 z')}), or with prelaunch tick ${prelaunch_tick} (currently +${prelaunch_mod})`;
            resolve(reply);
          }
        }
      });
    }
  }
};
