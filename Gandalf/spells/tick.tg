/**
 * Gandalf
 * Copyright (C) 2020 Craig Roberts, Braden Edmunds, Alex High
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see https://www.gnu.org/licenses/gpl-3.0.html
 *
 * @name tick.tg
 * @version 2022/11/06
 * @summary Gandalf Spells
 **/
'use strict';


const {encode} = require('html-entities');
const numeral = require('numeral');
const dayjs = require('dayjs')
const utc = require('dayjs/plugin/utc');
const timezone = require('dayjs/plugin/timezone');
const advancedFormat = require('dayjs/plugin/advancedFormat');
dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.extend(advancedFormat);

const { Mordor } = require('../../Mordor/Mordor');
const Tick = require('../../Mordor/models/Tick');

module.exports = {
  "tick": {
    usage: encode('/tick [tick=NOW] [timezone=UTC]'),
    description: 'Calculate when a tick will occur.',
    cast: (args) => {
      return new Promise(async (resolve, reject) => {
        let now_tick = await Tick.findLastTick();
        let _tick = numeral(args.length > 0 ? args[0] : now_tick.tick).value();
        if(_tick == null) {
          reject(`tick provided must be a number`);
        }
        else {
          let now_time = dayjs(now_tick.timestamp).utc();
          let _timezone = 'UTC';
          if(args.length > 1) {
            try {
              now_time.tz(args[1]);
              _timezone = args[1];
            }
            catch(err) {
              _timezone = undefined;
            }
          }

          if(!_timezone) {
            reject(`invalid timezone: ${args[1]}`);
          }
          else {
            let reply;
            if(now_tick.tick === _tick) {
              reply = `It is currently tick <b>${now_tick.tick}</b> (<i>${now_time.tz(_timezone).format('YYYY-MM-DD H:mm z')}</i>)`;
            }
            else {
              now_time = now_time.add(_tick - now_tick.tick, 'hour');
              if(_tick > now_tick.tick) {
                reply = `Tick <b>${_tick}</b> will happen in ${_tick - now_tick.tick} ticks (<i>${now_time.tz(_timezone).format('YYYY-MM-DD H:mm z')}</i>)`;
              }
              else {
                reply = `Tick <b>${_tick}</b> happened ${now_tick.tick - _tick} ticks ago (<i>${now_time.tz(_timezone).format('YYYY-MM-DD H:mm z')}</i>)`;
              }
            }
            resolve(reply);
          }
        }
      });
    }
  }
};
