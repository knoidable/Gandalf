/**
 * Custom mixins, re-done in SCSS
 *
 * @author AM.HIGH
 * @version 2.0
 * @since 1.0
 */

/**
 * Keyline using the :before pusedo selector
 */
@mixin keyline-before($width: 200px, $height: 2px, $margin: $grid-gutter-width, $color: $col-white) {
  &:before {
	background: $color;
	content: '';
	display: block;
	height: $height;
	width: $width;
	margin: $margin;
  }
}


/**
 * Keyline using the :after pusedo selector
 */
@mixin keyline-after($width: 200px, $height: 2px, $margin: $grid-gutter-width, $color: $col-white) {
  &:after {
	background: $color;
	content: '';
	display: block;
	height: $height;
	width: $width;
	margin: $margin;
  }
}


/**
 * Svg background image
 */
$svgdir: '../img/svg/'; // define the base path before the mixin
@mixin svg-background($filename, $width, $height) {
  background-image: url(#{$svgdir}#{$filename}.svg);
  background-image: linear-gradient(transparent, transparent), url(#{$svgdir}#{$filename}.svg);
  background-repeat: no-repeat;
  background-size: $width $height;
}


/**
 * Svg image setting width and height of the element
 */
@mixin svg($filename, $width, $height) {
  @include svg-background($filename, $width, $height);
  height: $height;
  width: $width;
}


/**
 * Shadow mixins
 */
@mixin text-shadow($string: 0 1px 3px rgba(0, 0, 0, .25)) {
  text-shadow: $string;
}


@mixin box-shadow($string) {
  -webkit-box-shadow: $string;
  -moz-box-shadow: $string;
  box-shadow: $string;
}


@mixin drop-shadow($x: 0, $y: 1px, $blur: 2px, $spread: 0, $alpha: .25) {
  -webkit-box-shadow: $x $y $blur $spread rgba(0, 0, 0, $alpha);
  -moz-box-shadow: $x $y $blur $spread rgba(0, 0, 0, $alpha);
  box-shadow: $x $y $blur $spread rgba(0, 0, 0, $alpha);
}


@mixin inner-shadow($x: 0, $y: 1px, $blur: 2px, $spread: 0, $alpha: .25) {
  -webkit-box-shadow: inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
  -moz-box-shadow: inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
  box-shadow: inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
}


/**
 * Border radius
 */
@mixin border-radius($radius: 5px) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;

  -moz-background-clip: padding;
  -webkit-background-clip: padding-box;
  background-clip: padding-box;
}


@mixin border-radiuses($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
  -webkit-border-top-right-radius: $topright;
  -webkit-border-bottom-right-radius: $bottomright;
  -webkit-border-bottom-left-radius: $bottomleft;
  -webkit-border-top-left-radius: $topleft;

  -moz-border-radius-topright: $topright;
  -moz-border-radius-bottomright: $bottomright;
  -moz-border-radius-bottomleft: $bottomleft;
  -moz-border-radius-topleft: $topleft;

  border-top-right-radius: $topright;
  border-bottom-right-radius: $bottomright;
  border-bottom-left-radius: $bottomleft;
  border-top-left-radius: $topleft;

  -moz-background-clip: padding;
  -webkit-background-clip: padding-box;
  background-clip: padding-box;
}


/**
 * Element alignment
 */
@mixin center-align() {
  position: relative;
  top: 50%;
  left: 50%;
  -webkit-transform: translateX(-50%) translateY(-50%);
  -moz-transform: translateX(-50%) translateY(-50%);
  transform: translateX(-50%) translateY(-50%);
}


@mixin vertical-align($align: 50%) {
  position: relative;
  top: $align;
  -webkit-transform: translateY(-$align);
  -moz-transform: translateY(-$align);
  transform: translateY(-$align);
}


@mixin horizontal-align($align: 50%) {
  position: relative;
  left: $align;
  -webkit-transform: translateX(-$align);
  -moz-transform: translateX(-$align);
  transform: translateX(-$align);
}


/**
 * Gradients
 */
@mixin gradient-vertical($startColor: #eee, $endColor: white) {
  background-color: $startColor;
  background: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
  background: -webkit-linear-gradient(top, $startColor, $endColor);
  background: -moz-linear-gradient(top, $startColor, $endColor);
  background: -ms-linear-gradient(top, $startColor, $endColor);
  background: -o-linear-gradient(top, $startColor, $endColor);
}


@mixin gradient-horizontal($startColor: #eee, $endColor: white) {
  background-color: $startColor;
  background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));
  background-image: -webkit-linear-gradient(left, $startColor, $endColor);
  background-image: -moz-linear-gradient(left, $startColor, $endColor);
  background-image: -ms-linear-gradient(left, $startColor, $endColor);
  background-image: -o-linear-gradient(left, $startColor, $endColor);
}


/**
 * Appearance wrapper
 */
@mixin appearance($argument: none) {
  -webkit-appearance: $argument;
  -moz-appearance: $argument;
  -ms-appearance: $argument;
  appearance: $argument;
}


/**
 * Animations, transitions and transforms
 */
@mixin animate($name, $duration: 300ms, $iteration: infinite, $delay: 0, $fillmode: both, $timingfunction: ease) {
  -webkit-animation-name: $name;
  -moz-animation-name: $name;
  -o-animation-name: $name;
  animation-name: $name;

  -webkit-animation-duration: $duration;
  -moz-animation-duration: $duration;
  -o-animation-duration: $duration;
  animation-duration: $duration;

  -webkit-animation-iteration-count: $iteration;
  -moz-animation-iteration-count: $iteration;
  -o-animation-iteration-count: $iteration;
  animation-iteration-count: $iteration;

  -webkit-animation-delay: $delay;
  -moz-animation-delay: $delay;
  -o-animation-delay: $delay;
  animation-delay: $delay;

  -webkit-animation-fill-mode: $fillmode;
  -moz-animation-fill-mode: $fillmode;
  -o-animation-fill-mode: $fillmode;
  animation-fill-mode: $fillmode;

  -webkit-animation-timing-function: $timingfunction;
  -moz-animation-timing-function: $timingfunction;
  -o-animation-timing-function: $timingfunction;
  animation-timing-function: $timingfunction;
}


@mixin transition($transition...) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}


@mixin transform($string) {
  -webkit-transform: $string;
  -moz-transform: $string;
  -ms-transform: $string;
  -o-transform: $string;
  transform: $string;
}


@mixin scale($ratio) {
  -webkit-transform: scale($ratio);
  -moz-transform: scale($ratio);
  -ms-transform: scale($ratio);
  -o-transform: scale($ratio);
  transform: scale($ratio);
}


@mixin rotate($deg) {
  -webkit-transform: rotate($deg);
  -moz-transform: rotate($deg);
  -ms-transform: rotate($deg);
  -o-transform: rotate($deg);
}


@mixin skew($deg, $deg2) {
  -webkit-transform: skew($deg, $deg2);
  -moz-transform: skew($deg, $deg2);
  -ms-transform: skew($deg, $deg2);
  -o-transform: skew($deg, $deg2);
}


@mixin translate($x, $y:0) {
  -webkit-transform: translate($x, $y);
  -moz-transform: translate($x, $y);
  -ms-transform: translate($x, $y);
  -o-transform: translate($x, $y);
}


@mixin translate3d($x, $y: 0, $z: 0) {
  -webkit-transform: translate3d($x, $y, $z);
  -moz-transform: translate3d($x, $y, $z);
  -ms-transform: translate3d($x, $y, $z);
  -o-transform: translate3d($x, $y, $z);
}


@mixin perspective($value: 1000) {
  -webkit-perspective: $value;
  -moz-perspective: $value;
  -ms-perspective: $value;
  perspective: $value;
}


@mixin transform-origin($x:center, $y:center) {
  -webkit-transform-origin: $x $y;
  -moz-transform-origin: $x $y;
  -ms-transform-origin: $x $y;
  -o-transform-origin: $x $y;
}


@mixin animation($animation) {
  -webkit-animation: $animation; /* Safari 4+ */
  -moz-animation: $animation; /* Fx 5+ */
  -o-animation: $animation; /* Opera 12+ */
  animation: $animation; /* IE 10+, Fx 29+ */
}


// opacity
@mixin make-rows() {
  margin-left: -15px;
  margin-right: -15px;
}


@mixin cols($cols) {
  $width: unquote(($cols / 12) * 100 + '%');
  width: $width;
}


// opacity
@mixin opacity($value) {
  $IEValue: $value*100;
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(opacity="+$IEValue+")";
  filter: alpha(opacity=$IEValue);
}


//
//  MEDIA QUERIES
//––––––––––––––––––––––––––––––––––––––––––––––––––

// A map of breakpoints.
$breakpoints: (
		xs: 576px,
		sm: 768px,
		md: 992px,
		lg: 1200px
);

//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

	// Get the breakpoint value.
	$breakpoint-value: map-get($breakpoints, $breakpoint);

	// Write the media query.
	@media (min-width: $breakpoint-value) {
	  @content;
	}

	// If the breakpoint doesn't exist in the map.
  } @else {

	// Log a warning.
	@warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

	// Get the breakpoint value.
	$breakpoint-value: map-get($breakpoints, $breakpoint);

	// Write the media query.
	@media (max-width: ($breakpoint-value - 1)) {
	  @content;
	}

	// If the breakpoint doesn't exist in the map.
  } @else {

	// Log a warning.
	@warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

	// Get the lower and upper breakpoints.
	$lower-breakpoint: map-get($breakpoints, $lower);
	$upper-breakpoint: map-get($breakpoints, $upper);

	// Write the media query.
	@media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
	  @content;
	}

	// If one or both of the breakpoints don't exist.
  } @else {

	// If lower breakpoint is invalid.
	@if (map-has-key($breakpoints, $lower) == false) {

	  // Log a warning.
	  @warn 'Your lower breakpoint was invalid: #{$lower}.';
	}

	// If upper breakpoint is invalid.
	@if (map-has-key($breakpoints, $upper) == false) {

	  // Log a warning.
	  @warn 'Your upper breakpoint was invalid: #{$upper}.';
	}
  }
}

